Tabelle:
1) Customers:
	- CF (ID)
	- Nome
	- Cognome
	- Indirizzo
	- Data nascita
	- Metodi di pagamento (forse)
	- Ordini (Req.5)
	- Carrello (Req. 6)


2) Produttori
	- P.IVA (ID)
	- Ragione Sociale
	- Sede
	- Prodotti (Req. 4)


3) Trasportatori
	- P.IVA (ID)
	- Ragione Sociale
	- Sede
	- Spedizioni assegnate (Req.7)



4) Articoli
	- Nome
	- Descrizione
	- Produttore che li fa (Req.2)
	- Costo
	- Quantità
	- Discontinuo bool



5) Ordini
	- Lista di Articoli (Req. 4)
	- Customer (Req.1)
	- Istante


6) Carrello
	- Customer proprietario (Req. 1)
	- Prodotti contenuti (Req.4)



7) Spedizione
	- Ordine a cui si riferisce (Req.5)
	- Trasportatore assegnato (Req. 3)
	- Stato spedizione ordine bool
	- Istante presa in gestione



----------------------------------



Funzionalità




Customers
Hanno tutti bisogno di login.
Possono:
[x]	- Vedere i prodotti messi in vendita dai produttori.
		Articolo[] getProducts(); utils.cpp

[x]	- Ricercare un prodotto con vari filtri.
		Articolo[] getFilteredProducts(Filters f); utils.cpp	USA REDIS INSIEME A QUELLA PRIMA, passando i filtri, eventualmente vuoti come ",,"
												PRENDENDO SupplierId, Name, Price Filtri:"=43,,<20.0"
[x]	-  Aggiungere un prodotto al proprio carrello.
		void addProductToCart(Articolo x, Customer c); customers.cpp
			- Fare un check che l'articolo aggiunto sia effettivamente disponibile

[x]	- Acquistare il contenuto del proprio carrello.
		void buyCart(Customer c); customers.cpp
			- Creare un ordine con i prodotti del carrello
				- usando void addOrder(Order o);
			- Diminuire quantità presenti in magazzino
			- Crea una spedizione e gliela assegna
				- void newShipping(Order o); trasportatori.cpp
			- Svuotare il carrello


[x]	- Visualizzare tracciamento pacco. (Da estendere dopo)				USA REDIS, con la funzione getKey("43","Orders","State")
		- bool getOrderState(Ordine o); utils.cpp

		


[x]	- Visualizzare i propri ordini passati.
		Ordine[] getPastOrders (Customer c); customers.cpp


[x]	- Aggiornare i dati di un account.
		void updateCustomer(Customer oldCust, Customer newCust); customers.cpp

[ ]	- Lasciare una recensione per un articolo, il venditore e il trasportatore. (Da rivedere dopo)



Produttori
Hanno tutti bisogno di login.
Possono:
[x]	- Mettere in vendita un nuovo articolo. (Aggiungere un nuovo prodotto o rimpizarne la quantità)
		void addStock (Articolo a, Quantità q); produttori.cpp 
			- In caso l'articolo a non esiste, lo crea e gli assegna la quantità q.
			- In caso esista, prende la quantità q' di a, e gli assegna q + q'.

[x]	- Modificare proprietà di un articolo.
		void updateProduct(Articolo old, Articolo new); utils.cpp


[x]	- Vedere lo stato di una spedizione.
		bool getOrderState(Ordine o); utils.cpp

[x]	- Marcare un prodotto come discontinuo.
		void setDiscontinuedProduct(Articolo a, Produttore p); produttori.cpp

[x]	- Visualizzare i propri articoli venduti.
		Ordine[] getPastOrders (Produttore p); produttori.cpp



Trasportatori
Possono:
[ ]	- Visualizzare tutte le proprie spedizioni.
		Spedizione[] getShippings(Trasportatore t); trasportatori.cpp

[ ]	- Aggiornare lo stato di una spedizione.
		void updateShipping(Spedizione old, Spedizione new); trasportatori.cpp

[ ]	- Prendere in carico un ordine.
		void newShipping(Order o); utils.cpp




---------------------------------------------
TEST-GENERATOR
[x] users
[x] customers
[x] suppliers
[x] shippers
[x] products
[x] orders
[x] orderProducts
[x] shippings
[x] cart
